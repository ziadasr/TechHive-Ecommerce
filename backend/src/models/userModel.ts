// userModel.ts
import { DataTypes, Model, HasManyGetAssociationsMixin } from "sequelize";
import sequelize from "../sequelize/sequelize";
import Address from "./user-adress-model";

class User extends Model {
  public id!: number;
  public name!: string;
  public dateOfBirth!: Date;
  public email!: string;
  public phoneNumber!: string;
  public password!: string;
  public lastLogin!: Date | null;
  public city!: string;
  public isVerified!: boolean;
  public EncryptedVerificationCode!: string | null;
  public PasswordResetCode!: string | null;
  public PasswordResetExpiry!: Date | null;

  // Association helpers (optional, for TypeScript + Sequelize)
  public getAddresses!: HasManyGetAssociationsMixin<Address>;
  public readonly addresses?: Address[];
  /**
   * *getAddresses → instance method generated by Sequelize (user.getAddresses()), typed with mixin.
   * *addresses → a property available when you load relations via include, typed for TS safety. to load address with the user same commmand
   * *const user = await User.findByPk(1, { include: ["addresses"] });
   */
}

User.init(
  {
    id: {
      type: DataTypes.INTEGER,
      autoIncrement: true,
      primaryKey: true,
    },
    EncryptedVerificationCode: {
      type: DataTypes.STRING,
      allowNull: true,
    },
    isVerified: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
    },
    phoneNumber: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    city: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    name: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    dateOfBirth: {
      type: DataTypes.DATE,
      allowNull: false,
    },
    email: {
      type: DataTypes.STRING,
      allowNull: false,
      unique: true,
    },
    password: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    lastLogin: {
      type: DataTypes.DATE,
      allowNull: true,
    },
    PasswordResetCode: {
      type: DataTypes.STRING,
      allowNull: true,
    },
    PasswordResetExpiry: {
      type: DataTypes.DATE,
      allowNull: true,
    },
  },
  {
    sequelize,
    modelName: "User",
    tableName: "Users", // explicit
    timestamps: true,
    underscored: true,
  }
);

export default User;
